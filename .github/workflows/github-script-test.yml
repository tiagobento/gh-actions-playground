name: "GitHub Actions :: Playground :: GitHub Script Action :: Test"

on:
  push:
    branches: [main]

jobs:
  run:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Support longpaths"
        if: matrix.os == 'windows-latest'
        run: git config --system core.longpaths true

      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          path: kie-tools
          repository: tiagobento/kie-tools
          fetch-depth: 1
          ref: main

      - name: "Setup environment"
        uses: ./kie-tools/.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Setup pre-build config"
        id: pre_build_config
        uses: actions/github-script@v6
        with:
          path: kie-tools
          result-encoding: string
          script: |
            const fs = require("fs");
            const path = require("path");

            const cwd = core.getInput("path");
            
            const pnpmWorkspacePackagesRootPaths = ["packages", "examples"].map(p => path.join(cwd, p)).join("\n");
            const nonSourceFilesPatterns = fs.readFileSync(path.join(cwd, "./.github/supporting-files/ci/non-source-files-patterns.txt"), "utf-8");
            const testSourceFilesPatterns = fs.readFileSync(path.join(cwd, "./.github/supporting-files/ci/tests-source-files-patterns.txt"), "utf-8");
            
            core.setOutput("pnpm_workspace_packages_root_paths", pnpmWorkspacePackagesRootPaths);
            core.setOutput("non_source_files_patterns", nonSourceFilesPatterns);
            core.setOutput("tests_source_files_patterns", testSourceFilesPatterns);

      - name: "Print pre-build config"
        shell: bash
        run: |
          echo "${{ steps.pre_build_config.outputs.pnpm_workspace_packages_root_paths }}" 
          echo "${{ steps.pre_build_config.outputs.non_source_files_patterns }}" 
          echo "${{ steps.pre_build_config.outputs.tests_source_files_patterns }}" 

      - name: "Build"
        id: build
        env:
          WEBPACK__minimize: "false"
          WEBPACK__tsLoaderTranspileOnly: "false"
          KIE_TOOLS_BUILD__runLinters: "true"
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__runIntegrationTests: ${{ matrix.os == 'ubuntu-latest' }}
          KIE_TOOLS_BUILD__buildContainerImages: "true"
          KIE_TOOLS_BUILD__buildExamples: "true"
          KIE_TOOLS_BUILD__ignoreTestFailures: "true"
          KIE_TOOLS_BUILD__ignoreIntegrationTestFailures: "true"
          DISPLAY: ":99.0"
          START_SERVER_AND_TEST_INSECURE: "true"
        shell: bash
        run: |
          cd kie-tools
          pnpm bootstrap
          pnpm -r build:prod

      - name: "Check tests result (`main` only)"
        if: always()
        uses: mikepenz/action-junit-report@1b47bb811362f3d8d753fc148cb7a13ec9e55570
        with:
          check_name: "-"
          annotate_only: true
          fail_on_failure: true
          report_paths: |
            ${{ steps.post_build_config.outputs.tests_reports_patterns }}
            ${{ steps.post_build_config.outputs.integration_tests_reports_patterns }}

      - name: "Setup post-build config"
        uses: actions/github-script@v6
        id: post_build_config
        if: always()
        with:
          path: kie-tools
          pnpm_workspace_packages_root_paths: ${{ steps.pre_build_config.outputs.pnpm_workspace_packages_root_paths }}
          result-encoding: string
          script: |
            const fs = require("fs");
            const path = require("path");
            
            const cwd = core.getInput("path");
            
            const pnpmWorkspacePackagesRoots = core.getMultilineInput("pnpm_workspace_packages_root_paths");
            console.log(pnpmWorkspacePackagesRoots)
            
            function prefixWithRoots(patterns) {
              return patterns.split("\n").filter(p => p.trim() !== "").flatMap(p => pnpmWorkspacePackagesRoots.map(r => path.join(r, p))).join("\n");
            }

            async function outputPatternsPrefixedWithRoots(outputName, patternsFilePath) {
              const patterns = prefixWithRoots(fs.readFileSync(patternsFilePath, "utf-8"));
              console.log(outputName + ":");
              console.log(patterns);
              console.log("-");
              core.setOutput(outputName, patterns)
            }

            await outputPatternsPrefixedWithRoots("tests_reports_patterns", path.join(cwd, "./.github/supporting-files/ci/tests-reports-patterns.txt"))
            await outputPatternsPrefixedWithRoots("integration_tests_reports_patterns", path.join(cwd, "./.github/supporting-files/ci/integration-tests-reports-patterns.txt"))
            await outputPatternsPrefixedWithRoots("integration_tests_artifacts_patterns", path.join(cwd, "./.github/supporting-files/ci/integration-tests-artifacts-patterns.txt"))
            await outputPatternsPrefixedWithRoots("build_artifacts_patterns", path.join(cwd, "./.github/supporting-files/ci/build-artifacts-patterns.txt"))

      - name: "Print post-build config"
        if: always()
        shell: bash
        run: |
          echo "${{ steps.post_build_config.outputs.tests_reports_patterns }}"
          echo "${{ steps.post_build_config.outputs.integration_tests_reports_patterns }}" 
          echo "${{ steps.post_build_config.outputs.integration_tests_artifacts_patterns }}" 
          echo "${{ steps.post_build_config.outputs.build_artifacts_patterns }}" 

      - name: "Install zip on Windows"
        if: runner.os == 'windos-latest'
        shell: bash
        run: |
          choco install zip --version 3.0 -y

      - name: "Zip artifacts and reports"
        if: always()
        env:
          TESTS_REPORTS_PATTERNS: >-
            ${{ steps.post_build_config.outputs.tests_reports_patterns }}
          INTEGRATION_TESTS_REPORTS_PATTERNS: >-
            ${{ steps.post_build_config.outputs.integration_tests_reports_patterns }}
          INTEGRATION_TESTS_ARTIFACTS_PATTERNS: >-
            ${{ steps.post_build_config.outputs.integration_tests_artifacts_patterns }}
          BUILD_ARTIFACTS_PATTERNS: >-
            ${{ steps.post_build_config.outputs.build_artifacts_patterns }}
        shell: bash
        run: |
          output_empty_zip () { echo UEsFBgAAAAAAAAAAAAAAAAAAAAAAAA== | base64 -d; }
          zip -r $RUNNER_TEMP/test-reports.zip $TESTS_REPORTS_PATTERNS || output_empty_zip > $RUNNER_TEMP/test-reports.zip
          zip -r $RUNNER_TEMP/integration-tests-reports.zip $INTEGRATION_TESTS_REPORTS_PATTERNS || output_empty_zip > $RUNNER_TEMP/integration-tests-reports.zip
          zip -r $RUNNER_TEMP/integration-tests-artifacts.zip $INTEGRATION_TESTS_ARTIFACTS_PATTERNS || output_empty_zip > $RUNNER_TEMP/integration-tests-artifacts.zip
          zip -r $RUNNER_TEMP/build-artifacts.zip $BUILD_ARTIFACTS_PATTERNS || output_empty_zip > $RUNNER_TEMP/build-artifacts.zip
          ls -la

      - name: "Upload test reports"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.os }}__test-reports
          path: |
            $RUNNER_TEMP/test-reports.zip

      - name: "Upload integration tests reports"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.os }}__integration-tests-reports
          path: |
            $RUNNER_TEMP/integration-tests-reports.zip

      - name: "Upload integration tests artifacts"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.os }}__integration-tests-artifacts
          path: |
            $RUNNER_TEMP/integration-tests-artifacts.zip

      - name: "Upload build artifacts reports"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.os }}__build-artifacts
          path: |
            $RUNNER_TEMP/build-artifacts.zip
